var GurpsFoundryRollLib=function(t){var e={};function o(l){if(e[l])return e[l].exports;var r=e[l]={i:l,l:!1,exports:{}};return t[l].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=t,o.c=e,o.d=function(t,e,l){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:l})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var l=Object.create(null);if(o.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(l,r,function(e){return t[e]}.bind(null,r));return l},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=5)}([function(t,e,o){var l=o(1);l.prototype.formulaEval=function(){"use strict";for(var t,e,o,l=[],r=this.value,n=0;n<r.length;n++)1===r[n].type||3===r[n].type?l.push({value:3===r[n].type?r[n].show:r[n].value,type:1}):13===r[n].type?l.push({value:r[n].show,type:1}):0===r[n].type?l[l.length-1]={value:r[n].show+("-"!=r[n].show?"(":"")+l[l.length-1].value+("-"!=r[n].show?")":""),type:0}:7===r[n].type?l[l.length-1]={value:(1!=l[l.length-1].type?"(":"")+l[l.length-1].value+(1!=l[l.length-1].type?")":"")+r[n].show,type:7}:10===r[n].type?(t=l.pop(),e=l.pop(),"P"===r[n].show||"C"===r[n].show?l.push({value:"<sup>"+e.value+"</sup>"+r[n].show+"<sub>"+t.value+"</sub>",type:10}):l.push({value:(1!=e.type?"(":"")+e.value+(1!=e.type?")":"")+"<sup>"+t.value+"</sup>",type:1})):2===r[n].type||9===r[n].type?(t=l.pop(),e=l.pop(),l.push({value:(1!=e.type?"(":"")+e.value+(1!=e.type?")":"")+r[n].show+(1!=t.type?"(":"")+t.value+(1!=t.type?")":""),type:r[n].type})):12===r[n].type&&(t=l.pop(),e=l.pop(),o=l.pop(),l.push({value:r[n].show+"("+o.value+","+e.value+","+t.value+")",type:12}));return l[0].value},t.exports=l},function(t,e,o){var l=o(2);l.prototype.postfixEval=function(t){"use strict";(t=t||{}).PI=Math.PI,t.E=Math.E;for(var e,o,r,n=[],i=this.value,s=void 0!==t.n,a=0;a<i.length;a++)1===i[a].type?n.push({value:i[a].value,type:1}):3===i[a].type?n.push({value:t[i[a].value],type:1}):0===i[a].type||7===i[a].type?void 0===n[n.length-1].type?n[n.length-1].value.push(i[a]):n[n.length-1].value=i[a].value(n[n.length-1].value):8===i[a].type?(e=n.pop(),o=n.pop(),n.push({type:1,value:i[a].value(o.value,e.value)})):10===i[a].type?(e=n.pop(),void 0===(o=n.pop()).type?(o.value=o.concat(e),o.value.push(i[a]),n.push(o)):void 0===e.type?(e.unshift(o),e.push(i[a]),n.push(e)):n.push({type:1,value:i[a].value(o.value,e.value)})):2===i[a].type||9===i[a].type?(e=n.pop(),void 0===(o=n.pop()).type?(console.log(o),(o=o.concat(e)).push(i[a]),n.push(o)):void 0===e.type?(e.unshift(o),e.push(i[a]),n.push(e)):n.push({type:1,value:i[a].value(o.value,e.value)})):12===i[a].type?(void 0!==(e=n.pop()).type&&(e=[e]),o=n.pop(),r=n.pop(),n.push({type:1,value:i[a].value(r.value,o.value,new l(e))})):13===i[a].type&&(s?n.push({value:t[i[a].value],type:3}):n.push([i[a]]));if(n.length>1)throw new l.exception("Uncaught Syntax error");return n[0].value>1e15?"Infinity":parseFloat(n[0].value.toFixed(15))},l.eval=function(t,e,o){return void 0===e?this.lex(t).toPostfix().postfixEval():void 0===o?void 0!==e.length?this.lex(t,e).toPostfix().postfixEval():this.lex(t).toPostfix().postfixEval(e):this.lex(t,e).toPostfix().postfixEval(o)},t.exports=l},function(t,e,o){var l=o(3);l.prototype.toPostfix=function(){"use strict";for(var t,e,o,r,n,i=[],s=[{value:"(",type:4,pre:0}],a=this.value,u=1;u<a.length;u++)if(1===a[u].type||3===a[u].type||13===a[u].type)1===a[u].type&&(a[u].value=Number(a[u].value)),i.push(a[u]);else if(4===a[u].type)s.push(a[u]);else if(5===a[u].type)for(;4!==(e=s.pop()).type;)i.push(e);else if(11===a[u].type){for(;4!==(e=s.pop()).type;)i.push(e);s.push(e)}else{r=(t=a[u]).pre,o=(n=s[s.length-1]).pre;var h="Math.pow"==n.value&&"Math.pow"==t.value;if(r>o)s.push(t);else{for(;o>=r&&!h||h&&r<o;)e=s.pop(),n=s[s.length-1],i.push(e),o=n.pre,h="Math.pow"==t.value&&"Math.pow"==n.value;s.push(t)}}return new l(i)},t.exports=l},function(t,e,o){var l=o(4);function r(t,e){for(var o=0;o<t.length;o++)t[o]+=e;return t}var n=["sin","cos","tan","pi","(",")","P","C","asin","acos","atan","7","8","9","int","cosh","acosh","ln","^","root","4","5","6","/","!","tanh","atanh","Mod","1","2","3","*","sinh","asinh","e","log","0",".","+","-",",","Sigma","n","Pi","pow"],i=["sin","cos","tan","&pi;","(",")","P","C","asin","acos","atan","7","8","9","Int","cosh","acosh"," ln","^","root","4","5","6","&divide;","!","tanh","atanh"," Mod ","1","2","3","&times;","sinh","asinh","e"," log","0",".","+","-",",","&Sigma;","n","&Pi;","pow"],s=[l.math.sin,l.math.cos,l.math.tan,"PI","(",")",l.math.P,l.math.C,l.math.asin,l.math.acos,l.math.atan,"7","8","9",Math.floor,l.math.cosh,l.math.acosh,Math.log,Math.pow,Math.sqrt,"4","5","6",l.math.div,l.math.fact,l.math.tanh,l.math.atanh,l.math.mod,"1","2","3",l.math.mul,l.math.sinh,l.math.asinh,"E",l.math.log,"0",".",l.math.add,l.math.sub,",",l.math.sigma,"n",l.math.Pi,Math.pow],a={0:11,1:0,2:3,3:0,4:0,5:0,6:0,7:11,8:11,9:1,10:10,11:0,12:11,13:0},u=[0,0,0,3,4,5,10,10,0,0,0,1,1,1,0,0,0,0,10,0,1,1,1,2,7,0,0,2,1,1,1,2,0,0,3,0,1,6,9,9,11,12,13,12,8],h={0:!0,1:!0,3:!0,4:!0,6:!0,8:!0,9:!0,12:!0,13:!0},p={0:!0,1:!0,2:!0,3:!0,4:!0,5:!0,6:!0,7:!0,8:!0,9:!0,10:!0,11:!0,12:!0,13:!0},d={0:!0,3:!0,4:!0,8:!0,12:!0,13:!0},c={},f={0:!0,1:!0,3:!0,4:!0,6:!0,8:!0,12:!0,13:!0},m={1:!0},v=[[],["1","2","3","7","8","9","4","5","6","+","-","*","/","(",")","^","!","P","C","e","0",".",",","n"],["pi","ln","Pi"],["sin","cos","tan","Del","int","Mod","log","pow"],["asin","acos","atan","cosh","root","tanh","sinh"],["acosh","atanh","asinh","Sigma"]];function g(t,e,o,l){for(var r=0;r<l;r++)if(t[o+r]!==e[r])return!1;return!0}l.addToken=function(t){for(var e=0;e<t.length;e++){var o=t[e].token.length,l=-1;if(o<v.length)for(var r=0;r<v[o].length;r++)if(t[e].token===v[o][r]){l=n.indexOf(v[o][r]);break}-1===l?(n.push(t[e].token),u.push(t[e].type),v.length<=t[e].token.length&&(v[t[e].token.length]=[]),v[t[e].token.length].push(t[e].token),s.push(t[e].value),i.push(t[e].show)):(n[l]=t[e].token,u[l]=t[e].type,s[l]=t[e].value,i[l]=t[e].show)}},l.lex=function(t,e){"use strict";var o,y,_,R,w={value:l.math.changeSign,type:0,pre:21,show:"-"},M={value:")",show:")",type:5,pre:0},b={value:"(",type:4,pre:0,show:"("},$=[b],x=[],F=t,S=h,L=0,D=c,P="";void 0!==e&&l.addToken(e);var E={};for(y=0;y<F.length;y++)if(" "!==F[y]){for(o="",_=F.length-y>v.length-2?v.length-1:F.length-y;_>0;_--)if(void 0!==v[_])for(R=0;R<v[_].length;R++)g(F,v[_][R],y,_)&&(o=v[_][R],R=v[_].length,_=0);if(y+=o.length-1,""===o)throw new l.Exception("Can't understand after "+F.slice(y));var C,G=n.indexOf(o),O=o,T=u[G],j=s[G],I=a[T],k=i[G],W=$[$.length-1];for(C=x.length;C--&&0===x[C];)if(-1!==[0,2,3,4,5,9,11,12,13].indexOf(T)){if(!0!==S[T])throw new l.Exception(o+" is not allowed after "+P);$.push(M),S=p,D=f,r(x,-1).pop()}if(!0!==S[T])throw new l.Exception(o+" is not allowed after "+P);if(!0===D[T]&&(T=2,j=l.math.mul,k="&times;",I=3,y-=o.length),E={value:j,type:T,pre:I,show:k},0===T)S=h,D=c,r(x,2).push(2),$.push(E),$.push(b);else if(1===T)1===W.type?(W.value+=j,r(x,1)):$.push(E),S=p,D=d;else if(2===T)S=h,D=c,r(x,2),$.push(E);else if(3===T)$.push(E),S=p,D=f;else if(4===T)r(x,1),L++,S=h,D=c,$.push(E);else if(5===T){if(!L)throw new l.Exception("Closing parenthesis are more than opening one, wait What!!!");L--,S=p,D=f,$.push(E)}else if(6===T){if(W.hasDec)throw new l.Exception("Two decimals are not allowed in one number");1!==W.type&&(W={value:0,type:1,pre:0},$.push(W),r(x,-1)),S=m,r(x,1),D=c,W.value+=j,W.hasDec=!0}else 7===T&&(S=p,D=f,r(x,1),$.push(E));8===T?(S=h,D=c,r(x,4).push(4),$.push(E),$.push(b)):9===T?(9===W.type?W.value===l.math.add?(W.value=j,W.show=k,r(x,1)):W.value===l.math.sub&&"-"===k&&(W.value=l.math.add,W.show="+",r(x,1)):5!==W.type&&7!==W.type&&1!==W.type&&3!==W.type&&13!==W.type?"-"===O&&(S=h,D=c,r(x,2).push(2),$.push(w),$.push(b)):($.push(E),r(x,2)),S=h,D=c):10===T?(S=h,D=c,r(x,2),$.push(E)):11===T?(S=h,D=c,$.push(E)):12===T?(S=h,D=c,r(x,6).push(6),$.push(E),$.push(b)):13===T&&(S=p,D=f,$.push(E)),r(x,-1),P=o}for(C=x.length;C--&&0===x[C];)$.push(M),r(x,-1).pop();if(!0!==S[5])throw new l.Exception("complete the expression");for(;L--;)$.push(M);return $.push(M),new l($)},t.exports=l},function(t,e){var o=function(t){this.value=t};o.math={isDegree:!0,acos:function(t){return o.math.isDegree?180/Math.PI*Math.acos(t):Math.acos(t)},add:function(t,e){return t+e},asin:function(t){return o.math.isDegree?180/Math.PI*Math.asin(t):Math.asin(t)},atan:function(t){return o.math.isDegree?180/Math.PI*Math.atan(t):Math.atan(t)},acosh:function(t){return Math.log(t+Math.sqrt(t*t-1))},asinh:function(t){return Math.log(t+Math.sqrt(t*t+1))},atanh:function(t){return Math.log((1+t)/(1-t))},C:function(t,e){var l=1,r=t-e,n=e;n<r&&(n=r,r=e);for(var i=n+1;i<=t;i++)l*=i;return l/o.math.fact(r)},changeSign:function(t){return-t},cos:function(t){return o.math.isDegree&&(t=o.math.toRadian(t)),Math.cos(t)},cosh:function(t){return(Math.pow(Math.E,t)+Math.pow(Math.E,-1*t))/2},div:function(t,e){return t/e},fact:function(t){if(t%1!=0)return"NaN";for(var e=1,o=2;o<=t;o++)e*=o;return e},inverse:function(t){return 1/t},log:function(t){return Math.log(t)/Math.log(10)},mod:function(t,e){return t%e},mul:function(t,e){return t*e},P:function(t,e){for(var o=1,l=Math.floor(t)-Math.floor(e)+1;l<=Math.floor(t);l++)o*=l;return o},Pi:function(t,e,o){for(var l=1,r=t;r<=e;r++)l*=Number(o.postfixEval({n:r}));return l},pow10x:function(t){for(var e=1;t--;)e*=10;return e},sigma:function(t,e,o){for(var l=0,r=t;r<=e;r++)l+=Number(o.postfixEval({n:r}));return l},sin:function(t){return o.math.isDegree&&(t=o.math.toRadian(t)),Math.sin(t)},sinh:function(t){return(Math.pow(Math.E,t)-Math.pow(Math.E,-1*t))/2},sub:function(t,e){return t-e},tan:function(t){return o.math.isDegree&&(t=o.math.toRadian(t)),Math.tan(t)},tanh:function(t){return o.sinha(t)/o.cosha(t)},toRadian:function(t){return t*Math.PI/180}},o.Exception=function(t){this.message=t},t.exports=o},function(t,e,o){"use strict";o.r(e),o.d(e,"DamageRoll",(function(){return a})),o.d(e,"ReactionRoll",(function(){return u})),o.d(e,"SuccessRoll",(function(){return h})),o.d(e,"DamageRollRenderer",(function(){return d})),o.d(e,"ReactionRollRenderer",(function(){return c})),o.d(e,"SuccessRollRenderer",(function(){return f}));class l{constructor(){this._foundryRoll=null}get evaluatedFormula(){return this._foundryRoll.formula}get total(){return this._foundryRoll.total}get foundryDice(){return this._foundryRoll.dice}roll(){return this._foundryRoll.roll(),this}}var r=o(0),n=o.n(r);class i{static successRollFormula(t){const e=(t+"").match(/^(?:([a-zA-Z][^-\r\n\f\v\0]*)-)?( *\d+)((?: *[+-] *[0-9]+ *(?: *\([^\r\n\f\v\0()]+\) *)?)*)$/);if(null===e)throw new Error(`Can't parse success roll formula '${t}' - it must adhere to the following format: [<trait name beginning with a letter and containing no - signs>-]<level>[<numeric modifiers including the + and - signs, and optionally spaces>]`);return{trait:e[1]||null,level:parseInt(e[2],10),modifiers:e[3]||null}}static modList(t){const e=[];for(;t.length>0;){const o=t.match(/^( *[+-] *[0-9]+ *(?: *\([^\r\n\f\v\0()]+\) *)?)+$/);if(null===o)throw new Error(`Can't parse modifier list formula '${t}' - it must adhere to the following format: <mandatory numeric modifier including the + or - sign>[<optional modifier description enclosed in parenthesis>], occurring one or more times`);const l=o[1];t=t.substr(0,t.length-l.length);const r=l.trim().match(/^([+-] *[0-9]+) *(?: *\(([^\r\n\f\v\0()]+)\))?$/);e.push({modifier:r[1].replace(/\s/,""),description:void 0!==r[2]?r[2].trim():""})}return e}static damageRollFormula(t){const e=(t+"").match(/^([1-9][0-9]*)d6?((?: *[+-] *[0-9]+ *(?: *\([^\d\r\n\f\v\0()][^\r\n\f\v\0()]*\) *)?)*)(.*)$/);if(null===e)throw new Error(`Can't parse damage roll formula '${t}' - it must adhere to the following format: <number of dice>d[<numeric modifiers including the + and - signs, and optionally spaces>][<extra non-roll information such as armor divisor, damage type etc>]`);return{dice:parseInt(e[1],10),adds:e[2]||"",meta:e[3]||""}}}const s=t=>t.map(t=>{let e=parseInt(t.modifier,10);return e>0?e="+"+e:e<0&&(e=""+e),{...t,modifier:e}});class a extends l{static fromFormula(t){return new a({formula:t})}static fromData({dice:t,adds:e="",meta:o="",modList:l=[]}){return new a({dice:t,adds:e,meta:o,modList:l})}constructor({dice:t=null,adds:e="",meta:o="",formula:l=null,modList:r=[]}){if(super(),null===l&&null===t)throw new Error("Attempted to create a DamageRoll with both dice and formula equal to null; at least one of them must be non-null!");if(null!==l){const n=i.damageRollFormula(l);t=n.dice,e=n.adds,o=n.meta,e.length>0&&(r=i.modList(e),e=(r=s(r)).pop().modifier,r=r.reverse())}else l=r.length>0?`${t}d${e} ${(r=s(r)).map(t=>t.modifier).join(" ")} ${o}`:`${t}d${e} ${o}`;l=(l=l.replace(/\s+/," ")).trim(),this._formula=l,this._formulaWithoutModList=`${t}d${e}`,this._meta=o,this._modList=r,r.length>0&&(e=`${e} ${r.map(t=>t.modifier).join(" ")}`),this._foundryRoll=new Roll(`${t}d6+${n.a.eval((e||0).toString())}`)}get formula(){return this._formula}get formulaWithoutModList(){return this._formulaWithoutModList}get meta(){return this._meta}get modList(){return this._modList}}class u extends l{static fromData(t=null){return new u({modifiers:t&&t.modifiers||null})}constructor({modifiers:t=null}){if(super(),this._evaluatedModifiers=null,t){const e=(t+"").match(/^(( *[+-] *[0-9]+)*)/);if(null===e)throw new Error(`Can't parse ReactionRoll modifiers formula '${t}' - it must comprise of numeric modifiers including the + and - signs, and optionally spaces between them`);this._evaluatedModifiers=n.a.eval(e[1].toString()),this._foundryRoll=new Roll("3d6+"+this._evaluatedModifiers)}else this._evaluatedModifiers=0,this._foundryRoll=new Roll("3d6");this._modifiers=t,this._total=null}get modifiers(){return this._modifiers}get evaluatedModifiers(){return this._evaluatedModifiers}get total(){return this._foundryRoll._rolled?this._total:null}roll(){return super.roll(),this._total="Disastrous",this._foundryRoll.total>=1&&(this._total="Very Bad"),this._foundryRoll.total>=4&&(this._total="Bad"),this._foundryRoll.total>=7&&(this._total="Poor"),this._foundryRoll.total>=10&&(this._total="Neutral"),this._foundryRoll.total>=13&&(this._total="Good"),this._foundryRoll.total>=16&&(this._total="Very Good"),this._foundryRoll.total>=19&&(this._total="Excellent"),this}}class h extends l{static fromFormula(t){return new h({formula:t})}static fromData({level:t,trait:e=null,modifiers:o=null,modList:l=[]}){return new h({level:t,trait:e,modifiers:o,modList:l})}constructor({level:t=null,trait:e=null,formula:o=null,modifiers:l=null,modList:r=[]}){if(super(),null===o&&null===t)throw new Error("Attempted to create a SuccessRoll with both level and formula equal to null; at least one of them must be non-null!");if(null!==o){const n=i.successRollFormula(o);e=n.trait,t=n.level,r=null!==(l=n.modifiers)?i.modList(l):[]}else 0===r.length&&(r=null!==l?i.modList(l):[]);t=parseInt(t,10),l=(r=(r=s(r)).reverse()).length>0?r.map(t=>t.modifier).join(" "):null,this._foundryRoll=new Roll("3d6"),this._level=t,this._trait=e,this._modifiers=l,this._modList=r,this._evaluatedModifiers=r.reduce((t,e)=>t+n.a.eval(e.modifier.toString()),0),this._isSuccess=null,this._marginOfSuccess=null,this._isCritFail=!1,this._isCritSuccess=!1}get level(){return this._level}get trait(){return this._trait}get modifiers(){return this._modifiers}get modList(){return this._modList}get evaluatedLevel(){return this.level+this._evaluatedModifiers}get isSuccess(){return this._foundryRoll._rolled?this._isSuccess:null}get marginOfSuccess(){return this._foundryRoll._rolled?this._marginOfSuccess:null}get isCritFail(){return this._foundryRoll._rolled?this._isCritFail:null}get isCritSuccess(){return this._foundryRoll._rolled?this._isCritSuccess:null}roll(){return super.roll(),this._marginOfSuccess=this.level-this.total+this._evaluatedModifiers,this._isSuccess=this._marginOfSuccess>=0,(this.total<=4||this.total<=6&&this.marginOfSuccess>=10)&&(this._isCritSuccess=!0,this._isSuccess=!0),17===this.total&&(this._isSuccess=!1),(18===this.total||17===this.total&&this.level+this._evaluatedModifiers<=15||this.marginOfSuccess<=-10)&&(this._isCritFail=!0,this._isSuccess=!1),this}}class p{getTooltip(t){const e=this,o={formula:t.evaluatedFormula,total:t.total,parts:t.foundryDice.map(t=>{const o=e._getWorstDieFace(t),l=e._getBestDieFace(t);return{formula:t.formula,total:t.total,faces:t.faces,rolls:t.rolls.map(e=>({result:e.roll,classes:[t.constructor.name.toLowerCase(),"d"+t.faces,e.roll===o?"min":null,e.roll===l?"max":null].filter(t=>t).join(" ")}))}})};return renderTemplate(CONFIG.Dice.tooltip,o)}_getMouseover(t){return null}_getBestDieFace(t){return Math.max(...t.sides)}_getWorstDieFace(t){return Math.min(...t.sides)}async render(t,e={},o={}){return e=mergeObject({template:"modules/GURPS-Foundry-Roll-Templates/templates/roll.html",useTooltip:!0,useMouseover:!0},e),o=mergeObject({user:game.user._id,flavor:null,formula:this._getFormula(t),tooltip:e.useTooltip?await this.getTooltip(t):"",mouseover:e.useMouseover?await this._getMouseover(t):null,total:this._getTotal(t)},o),renderTemplate(e.template,o)}_getFormula(t){return t.evaluatedFormula}_getTotal(t){return Math.round(100*t.total)/100}}class d extends p{_getFormula(t){return t.formula}_getTotal(t){return`${t.total}${t.meta}`}_getMouseover(t){if(0===t.modList.length)return null;if(t.modList.every(t=>null===t.description||void 0===t.description||0===t.description.length))return null;const e="margin: 0; padding: 0; line-height: 0.9rem;";return`<ul style="list-style-type: none; margin: 0; padding: 0;"><li style="${e}">${t.formulaWithoutModList} base</li>${t.modList.map(t=>`<li style="${e}">${t.modifier} ${t.description}</li>`).join("")}</ul>`}}class c extends p{_getFormula(t){return t.modifiers?`Reaction roll with ${t.modifiers}<b style="padding-left: 10px">= ${t.evaluatedModifiers}</b>`:"Reaction roll"}_getTotal(t){return t.total}}class f extends p{_getBestDieFace(t){return Math.min(...t.sides)}_getWorstDieFace(t){return Math.max(...t.sides)}_getFormula(t){let e=this._getFormulaWithoutMods(t);return null!==t.modifiers&&(e=`${e} ${t.modifiers}<b> = ${t.evaluatedLevel}</b>`),e}_getFormulaWithoutMods(t){return`${t.trait?t.trait+"-":"Rolled against "}${t.level}`}_getTotal(t){let e=t.isSuccess?"Success":"Failure";if(t.isCritSuccess||t.isCritFail){e=`<b style="color:${t.isCritSuccess?"#008800":"#DD0000"}">Critical ${e}</b>`}return`${e} by ${t.isSuccess?t.marginOfSuccess:-t.marginOfSuccess}`}_getMouseover(t){if(0===t.modList.length)return null;if(t.modList.every(t=>null===t.description||void 0===t.description||0===t.description.length))return null;const e="margin: 0; padding: 0; line-height: 0.9rem;";return`<ul style="list-style-type: none; margin: 0; padding: 0;"><li style="${e}">${this._getFormulaWithoutMods(t)}</li>${t.modList.map(t=>`<li style="${e}">${t.modifier} ${t.description}</li>`).join("")}</ul>`}}}]);const _GurpsFoundryRollLib$DamageRoll=GurpsFoundryRollLib.DamageRoll,_GurpsFoundryRollLib$ReactionRoll=GurpsFoundryRollLib.ReactionRoll,_GurpsFoundryRollLib$SuccessRoll=GurpsFoundryRollLib.SuccessRoll,_GurpsFoundryRollLib$DamageRollRenderer=GurpsFoundryRollLib.DamageRollRenderer,_GurpsFoundryRollLib$ReactionRollRenderer=GurpsFoundryRollLib.ReactionRollRenderer,_GurpsFoundryRollLib$SuccessRollRenderer=GurpsFoundryRollLib.SuccessRollRenderer;export{_GurpsFoundryRollLib$DamageRoll as DamageRoll,_GurpsFoundryRollLib$ReactionRoll as ReactionRoll,_GurpsFoundryRollLib$SuccessRoll as SuccessRoll,_GurpsFoundryRollLib$DamageRollRenderer as DamageRollRenderer,_GurpsFoundryRollLib$ReactionRollRenderer as ReactionRollRenderer,_GurpsFoundryRollLib$SuccessRollRenderer as SuccessRollRenderer};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,